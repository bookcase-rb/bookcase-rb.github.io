{"version":3,"file":"Settings-zHbHRNMU.js","sources":["../../src/pages/settings/clearData/ClearData.tsx","../../src/pages/settings/Settings.tsx"],"sourcesContent":["/**\n * @file 清除数据菜单项\n * @author Yangholmes 2025-05-07\n */\n\nimport { defineComponent } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport cn from 'classnames';\n\nimport { useNaiveFeedback } from '@/composite/useNaiveFeedback';\nimport db from '@/services/db';\n\nimport styles from '../settings.module.less';\n\nexport default defineComponent({\n  name: 'ClearData',\n  setup() {\n    const { t } = useI18n({ useScope: 'global' });\n    const { dialog, message } = useNaiveFeedback();\n\n    return () => <li class={cn(styles.item)} onClick={() => {\n      dialog.warning({\n        title: t('pages.settings.clearData.confirmDialog.title'),\n        content: t('pages.settings.clearData.confirmDialog.content'),\n        positiveText: t('common.yes'),\n        negativeText: t('common.thinkAgain'),\n        closable: false,\n        maskClosable: false,\n        onPositiveClick() {\n          Promise.all([\n            db.book.clearAllBooks(),\n            db.bookcase.clearAllBookcases(),\n            db.settings.clearAllSettings()\n          ]).then(() => {\n            message.success(t('pages.settings.clearData.confirmDialog.clearFinished'));\n            setTimeout(() => {\n              location.replace('./');\n            }, 7e2);\n          });\n        }\n      });\n    }}>\n      <span class={cn(styles.label)}>{t('pages.settings.clearData.label')}</span>\n      <span class={cn(styles.value)}></span>\n    </li>;\n  }\n});\n","/**\n * @file settings list\n * @author Yangholmes 2025-03-18\n */\n\nimport { defineComponent, onMounted, ref } from 'vue';\nimport { useI18n } from 'vue-i18n';\nimport cn from 'classnames';\nimport useSettingsStore from '@/stores/settings';\nimport { useNaiveFeedback } from '@/composite/useNaiveFeedback';\n\nimport BasicLayout from '../layout/BasicLayout';\nimport BasicTopBar from '../layout/BasicTopBar';\nimport DoubleDeckerContainer from '@/components/doubleDeckerContainer/DoubleDeckerContainer';\nimport DeckerLayout from '../layout/DeckerLayout';\nimport SvgIcon from '@/components/svgIcon/SvgIcon';\nimport ClearData from './clearData/ClearData';\n\nimport { NButton } from 'naive-ui';\n\nimport db from '@/services/db';\nimport { Setting } from '@/services/db/web/settings/db';\nimport { getControl, needOpenDecker, renderValue } from './utils';\nimport { deepToRaw } from '../vue-utils';\nimport { settingCatogory } from './config';\n\nimport styles from './settings.module.less';\n\nexport default defineComponent({\n  name: 'Settings',\n  setup() {\n    const { updateSettingMap } = useSettingsStore();\n    const { t } = useI18n({ useScope: 'global' });\n\n    const { message } = useNaiveFeedback();\n\n    const allSettings = ref<Setting[][]>([]);\n\n    const selectedCatogoryIndex = ref<number>();\n    const selectedSetting = ref<Setting>();\n\n    const init = () => {\n      return Promise.all(settingCatogory.map(catogory => db.settings.getSettingsByCategory(catogory))).then(res => {\n        allSettings.value = res;\n      });\n    };\n\n    onMounted(() => {\n      init();\n    });\n\n    const saveSetting = (setting: Setting) => {\n      const { key, value } = setting;\n      return db.settings.updateSettingValueByKey(key, value).then(() => {\n        message.success(t('pages.settings.decker.topbar.saveSuccess'));\n        updateSettingMap(key, value);\n      }).catch(() => {\n        message.error(t('pages.settings.decker.topbar.saveFailed'));\n        init();\n      });\n    };\n\n    const renderSettingControl = (back: () => void) => {\n      if (selectedSetting.value === undefined || selectedCatogoryIndex.value === undefined) {\n        back();\n        return <></>;\n      }\n      const s = selectedSetting.value;\n      return <DeckerLayout\n        topBar={<BasicTopBar\n          leftSlots={[<NButton\n            text\n            onClick={back}\n          >\n            {t('common.cancel')}\n          </NButton>]}\n          rightSlots={[<NButton\n            text\n            type=\"primary\"\n            onClick={() => {\n              const { key } = s;\n              const selectedCatogorySetting = allSettings.value[selectedCatogoryIndex.value!];\n              const index = selectedCatogorySetting.findIndex(se => se.key === key);\n              selectedCatogorySetting.splice(index, 1, s);\n              allSettings.value.splice(selectedCatogoryIndex.value!, 1, selectedCatogorySetting);\n\n              saveSetting(s).finally(() => {\n                selectedSetting.value = undefined;\n                selectedCatogoryIndex.value = undefined;\n                back();\n              });\n            }}\n          >\n            {t('common.save')}\n          </NButton>]}\n        />}\n      >\n        <div class={styles.control}>\n          <div>{t(s.label)}</div>\n          {getControl(s, (value) => {\n            s.value = value;\n          })}\n        </div>\n      </DeckerLayout>;\n    };\n\n    const renderSettings = (go: () => void) => (<BasicLayout topBar={\n      <BasicTopBar>\n        <SvgIcon name=\"setting\" /> {t('pages.settings.topbar.title')}\n      </BasicTopBar>\n    }>\n      <h2>{t('pages.settings.topbar.title')}</h2>\n      <ul class={cn(styles.list)}>\n        {allSettings.value.map((settings, index) => {\n          return <div class={cn(styles.catogory)}>\n            {settings.filter(setting => !setting.hidden).map((setting) => {\n              return <li\n                key={setting.key}\n                class={cn(styles.item)}\n                onClick={() => {\n                  if (needOpenDecker(setting)) {\n                    selectedCatogoryIndex.value = index;\n                    selectedSetting.value = deepToRaw(setting);\n                    go();\n                  }\n                }}\n              >\n                <span\n                  class={cn(styles.label)}\n                >{t(setting.label)}</span>\n                <span\n                  class={cn(styles.value)}\n                >\n                  {renderValue(setting, (value) => {\n                    setting.value = value;\n                    saveSetting(setting);\n                  })}\n                </span>\n              </li>;\n            })}\n          </div>;\n        })}\n        <div class={cn(styles.catogory)}>\n          <ClearData />\n        </div>\n      </ul>\n    </BasicLayout>);\n\n    return () => <DoubleDeckerContainer\n      class={cn(styles.settings)}\n    >\n      {{\n        default: renderSettings,\n        decker: renderSettingControl\n      }}\n    </DoubleDeckerContainer>;\n  }\n});\n"],"names":["defineComponent","name","setup","t","useI18n","useScope","dialog","message","useNaiveFeedback","_createVNode","cn","styles","item","onClick","warning","title","content","positiveText","negativeText","closable","maskClosable","onPositiveClick","Promise","all","db","book","clearAllBooks","bookcase","clearAllBookcases","settings","clearAllSettings","then","success","setTimeout","location","replace","label","value","_isSlot","s","Object","prototype","toString","call","_isVNode","updateSettingMap","useSettingsStore","allSettings","ref","selectedCatogoryIndex","selectedSetting","init","settingCatogory","map","catogory","getSettingsByCategory","res","onMounted","saveSetting","setting","key","updateSettingValueByKey","catch","error","renderSettingControl","back","_slot","_slot2","undefined","_Fragment","DeckerLayout","BasicTopBar","NButton","default","selectedCatogorySetting","index","findIndex","se","splice","finally","control","getControl","renderSettings","go","BasicLayout","SvgIcon","_createTextVNode","list","filter","hidden","needOpenDecker","deepToRaw","renderValue","ClearData","DoubleDeckerContainer","decker"],"mappings":"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"}