{"version":3,"file":"blobHash.worker-DfHQqAgc.js","sources":["../src/services/db/web/blobHash.worker.ts"],"sourcesContent":["/**\n * @file BlobHash Worker\n * @author Yangholmes 2025-03-25\n */\n\nexport type BufferData = {\n  buffer: ArrayBuffer;\n  type: string;\n}\n\n/**\n * 计算 Blob 的 SHA-256 哈希\n * @param blob Blob\n */\nfunction blobSHA256(blob: Blob) {\n  return blob.arrayBuffer().then(buffer => {\n    return crypto.subtle.digest('SHA-256', buffer).then(hashBuffer => {\n      return Array.from(new Uint8Array(hashBuffer))\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n    });\n  });\n}\n\nself.onmessage = (e: MessageEvent<BufferData>) => {\n  const { buffer, type } = e.data;\n  const blob = new Blob([buffer], { type });\n  blobSHA256(blob).then(hash => {\n    self.postMessage({\n      buffer,\n      type,\n      hash\n    }, [buffer]);\n  });\n};\n"],"names":["blobSHA256","blob","buffer","hashBuffer","b","e","type","hash"],"mappings":"yBAcA,SAASA,EAAWC,EAAY,CAC9B,OAAOA,EAAK,YAAA,EAAc,KAAeC,GAChC,OAAO,OAAO,OAAO,UAAWA,CAAM,EAAE,KAAmBC,GACzD,MAAM,KAAK,IAAI,WAAWA,CAAU,CAAC,EACzC,IAAIC,GAAKA,EAAE,SAAS,EAAE,EAAE,SAAS,EAAG,GAAG,CAAC,EACxC,KAAK,EAAE,CACX,CACF,CACH,CAEA,KAAK,UAAaC,GAAgC,CAChD,KAAM,CAAE,OAAAH,EAAQ,KAAAI,GAASD,EAAE,KACrBJ,EAAO,IAAI,KAAK,CAACC,CAAM,EAAG,CAAE,KAAAI,EAAM,EAC7BN,EAAAC,CAAI,EAAE,KAAaM,GAAA,CAC5B,KAAK,YAAY,CACf,OAAAL,EACA,KAAAI,EACA,KAAAC,CAAA,EACC,CAACL,CAAM,CAAC,CAAA,CACZ,CACH"}