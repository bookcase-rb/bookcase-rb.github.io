{"version":3,"file":"BookcaseNameInput-BjtSz8ft.js","sources":["../../src/pages/bookcase/utils.ts","../../src/pages/bookcase/Editor.tsx","../../src/pages/bookcase/bookcaseNameInput/BookcaseNameInput.tsx"],"sourcesContent":["/**\n * @file utils for bookcase\n * @author Yangholmes 2024-12-01\n */\n\nimport { Layer } from 'konva/lib/Layer';\nimport { Rect } from 'konva/lib/shapes/Rect';\n\n/** 基本信息 */\ntype BasicInfo = {\n  createDate?: number;\n  updateDate?: number;\n}\n\n/** 书架元数据 */\nexport type Meta = {\n  width: number;\n  height: number;\n  unit: number;\n  fill: string;\n  fillSelected: string;\n}\n\n/** 单元格 */\nexport type Cell = BasicInfo & {\n  /** 单元格 id */\n  id?: string;\n  /** 单元格名称 */\n  name?: string;\n  /** 单元格所在书柜 id */\n  bookcaseId?: string;\n  from: [number, number];\n  to: [number, number];\n  merge: boolean;\n}\n\n/** 书架 */\nexport type Bookcase = BasicInfo & {\n  id?: string;\n  name?: string;\n  meta: Meta;\n  cells: Cell[];\n}\n\n/**\n * 将选中的多个单元格合并成一个单元格\n *\n * 合并成功返回新的单元格\n *\n * 如果选中的多个单元格不能合并，则返回null\n * @param cells 选中的单元格\n */\nexport function getBoundingBox(cells: Cell[]): Cell | null {\n  const pointsCounter = new Map<string, number>();\n\n  cells.forEach((cell) => {\n    const { from, to } = cell;\n    const [x1, y1] = from;\n    const [x2, y2] = to;\n    [x1, x2].forEach((x) => {\n      [y1, y2].forEach((y) => {\n        const p = `${x},${y}`;\n        const n = pointsCounter.get(p);\n        if (n === undefined) {\n          pointsCounter.set(p, 1);\n        } else if (n <= 1) {\n          pointsCounter.delete(p);\n        } else {\n          pointsCounter.set(p, n - 1);\n        }\n      });\n    });\n  });\n\n  if (pointsCounter.size !== 4) {\n    return null;\n  }\n\n  const xs: number[] = [];\n  const ys: number[] = [];\n\n  pointsCounter.forEach((_, key) => {\n    const [x, y] = key.split(',').map(k => Number.parseInt(k, 10));\n    xs.push(x);\n    ys.push(y);\n  });\n\n  return ({\n    from: [Math.min(...xs), Math.min(...ys)],\n    to: [Math.max(...xs), Math.max(...ys)],\n    merge: true,\n  });\n}\n\n/**\n * 获取某个层中所有矩形\n * @param layer 层\n */\nexport function getRectChildren(layer?: Layer) {\n  if (!layer) {\n    return [];\n  }\n  const children = layer.getChildren();\n  return children.filter(child => child instanceof Rect);\n}\n\nexport function clearRectChildren(layer?: Layer) {\n  const rects = getRectChildren(layer);\n  rects.forEach(rect => rect.remove());\n}\n\n/**\n * 计算初始位置\n * @param meta 书架元数据\n * @param clientWidth\n * @param clientHeight\n */\nexport function getInitPosition(meta: Meta, clientWidth: number, clientHeight: number) {\n  const { width, height, unit } = meta;\n  const center = {\n    x: width ? (clientWidth - width * unit) / 2 : 20,\n    y: height ? (clientHeight - height * unit) / 2 : 50,\n  };\n  return center;\n}\n\n/**\n * 获取两个点的中心\n */\nexport function getCenter(p1: [number, number], p2: [number, number]): [number, number] {\n  return ([\n    (p1[0] + p2[0]) / 2,\n    (p1[1] + p2[1]) / 2\n  ]);\n}\n\n/**\n * 获取两点之间的距离\n */\nexport function getDistance(p1: [number, number], p2: [number, number]) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n","/**\n * @file 编辑书柜\n * @author Yangholmes 2024-11-03\n */\n\nimport { defineComponent, onMounted, PropType, ref, shallowRef, toRefs, watch } from 'vue';\n\nimport Konva from 'konva';\n\nimport { Bookcase, Cell, getBoundingBox, getCenter, getDistance, getInitPosition, getRectChildren, Meta } from './utils';\n\nimport { defaultMeta, rectOptions } from './constants';\n\nexport interface TRect extends Konva.Rect {\n  attrs: {\n    cell: Cell;\n  };\n}\n\nexport default defineComponent({\n  name: 'BookcaseEditor',\n  props: {\n    data: {\n      type: Object as PropType<Bookcase>,\n      required: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    beforeMerge: {\n      type: Function as PropType<(cellIds: string[]) => Promise<boolean>>,\n      default: async () => true,\n      required: false\n    },\n    beforeBreak: {\n      type: Function as PropType<(cellIds: string[]) => Promise<boolean>>,\n      default: async () => true,\n      required: false\n    },\n  },\n  setup(props, ctx) {\n    const { data, readonly } = toRefs(props);\n\n    watch(data, () => {\n      if (data.value) {\n        init(data.value);\n      }\n    }, {\n      immediate: true\n    });\n\n    /** 容器 */\n    const containerRef = shallowRef<HTMLDivElement>();\n\n    /** 画布 */\n    const stageRef = shallowRef<Konva.Stage>();\n\n    /** 图层 */\n    const layerRef = shallowRef<Konva.Layer>();\n\n    const selectedRects = shallowRef<TRect[]>([]);\n\n    const cellMeta = shallowRef<Meta>(defaultMeta);\n\n    const bookcasePosition = ref<{\n      x: number; y: number;\n    }>();\n\n    function init(bookcase: Bookcase) {\n      if (!containerRef.value) {\n        // TODO throw error\n        return;\n      }\n\n      const { meta, cells } = bookcase;\n\n      const { unit, fill } = meta;\n\n      const root = containerRef.value.parentElement;\n      const clientWidth = root?.clientWidth || 300;\n      const clientHeight = root?.clientHeight || 300;\n\n      bookcasePosition.value = bookcasePosition.value ?? getInitPosition(meta, clientWidth, clientHeight);\n\n      const stage = new Konva.Stage({\n        container: containerRef.value,\n        x: bookcasePosition.value.x,\n        y: bookcasePosition.value.y,\n        width: clientWidth,\n        height: clientHeight,\n        draggable: true,\n      });\n\n      const layer = new Konva.Layer();\n\n      stage.add(layer);\n      stageRef.value = stage;\n      layerRef.value = layer;\n\n      /** 上一个划过的四边形 */\n      let prevRect: TRect | null = null;\n\n      let lastCenter: null | [number, number] = null;\n      let lastDist = 0;\n\n      stage.on('touchstart', (e) => {\n        const { target, evt } = e;\n        evt.preventDefault();\n        const { touches } = evt;\n        if (touches.length === 1) {\n          getRectChildren(layer).forEach(r => r.fill(cellMeta.value.fill));\n          selectedRects.value = [];\n          prevRect = null;\n          if (!stage.isDragging() && target instanceof Konva.Rect) {\n            stage.stopDrag();\n            // 清空目前的选中态\n            getRectChildren(layer).forEach(r => r.fill(cellMeta.value.fill));\n            // 选中第一个\n            target.fill(cellMeta.value.fillSelected);\n            selectedRects.value.push(target);\n            prevRect = target;\n          }\n          layer.draw();\n        }\n        if (touches.length === 2) {\n          stage.stopDrag();\n          const p1: [number, number] = [touches[0].clientX, touches[0].clientY];\n          const p2: [number, number] = [touches[1].clientX, touches[1].clientY];\n          lastCenter = getCenter(p1, p2);\n          lastDist = getDistance(p1, p2);\n        }\n      });\n\n      stage.on('touchmove', (e) => {\n        const { target, evt } = e;\n        evt.preventDefault();\n        const { touches } = evt;\n        if (touches.length === 1) {\n          if (!stage.isDragging() && target instanceof Konva.Rect) {\n            // 光标进入一个新的对象\n            if (prevRect !== target) {\n              const index = selectedRects.value.findIndex(rect => rect === target);\n              const prevIndex = selectedRects.value.findIndex(rect => rect === prevRect);\n              // 对象未选中\n              if (index === -1) {\n                target.fill(cellMeta.value.fillSelected);\n                selectedRects.value.push(target);\n              }\n              // 对象已选中\n              else {\n                selectedRects.value.splice(prevIndex, 1);\n                prevRect?.fill(cellMeta.value.fill);\n              }\n              prevRect = target as TRect;\n            }\n            layer.draw();\n          }\n        }\n        if (touches.length === 2) {\n          const p1: [number, number] = [touches[0].clientX, touches[0].clientY];\n          const p2: [number, number] = [touches[1].clientX, touches[1].clientY];\n          const newCenter = getCenter(p1, p2);\n          const newDist = getDistance(p1, p2);\n\n\n          if (!lastCenter) {\n            lastCenter = newCenter;\n          }\n\n          /** 计算缩放比例 */\n          const p = [\n            (newCenter[0] - stage.x()) / stage.scaleX(),\n            (newCenter[1] - stage.y()) / stage.scaleY(),\n          ];\n\n          const scale = stage.scaleX() * (newDist / lastDist);\n\n          stage.scaleX(scale);\n          stage.scaleY(scale);\n\n          // 计算新的中心点位置\n          const dx = newCenter[0] - lastCenter[0];\n          const dy = newCenter[1] - lastCenter[1];\n\n          const newPosition = {\n            x: newCenter[0] - p[0] * scale + dx,\n            y: newCenter[1] - p[1] * scale + dy,\n          };\n\n          stage.position(newPosition);\n\n          lastCenter = newCenter;\n          lastDist = newDist;\n        }\n      });\n\n      stage.on('touchout', () => {\n        lastCenter = null;\n        lastDist = 0;\n      });\n\n      cellMeta.value = meta;\n\n      cells.forEach(c => {\n        const { from, to } = c;\n        const x = from[0] * unit;\n        const y = from[1] * unit;\n        const height = (to[1] - from[1]) * unit;\n        const width = (to[0] - from[0]) * unit;\n\n        const rect = new Konva.Rect({\n          y, x, width, height, fill,\n          cell: {\n            ...c\n          },\n          ...rectOptions\n        });\n        layer.add(rect);\n        layer.draw();\n      });\n\n    }\n\n    onMounted(() => {\n      if (data.value) {\n        init(data.value);\n      }\n    });\n\n    const mergeCells = () => {\n      if (readonly.value) {\n        return;\n      }\n      if (selectedRects.value.length < 1) {\n        throw new Error('merge should have at least two cells');\n      }\n      const cells = selectedRects.value.map(e => e.attrs.cell);\n      const newCell = getBoundingBox(cells);\n      if (newCell) {\n        // 删除选中的矩形\n        selectedRects.value.forEach(s => s.remove());\n\n        const { unit, fill } = cellMeta.value;\n        const { from, to } = newCell;\n        const x = from[0] * unit;\n        const y = from[1] * unit;\n        const height = (to[1] - from[1]) * unit;\n        const width = (to[0] - from[0]) * unit;\n\n        const _rect = new Konva.Rect({\n          y, x, width, height, fill,\n          cell: {\n            ...newCell\n          },\n          ...rectOptions\n        });\n        layerRef.value?.add(_rect);\n        selectedRects.value = [];\n      } else {\n        // 清空目前的选中项\n        selectedRects.value.forEach((rect) => {\n          rect.fill(cellMeta.value.fill);\n        });\n        selectedRects.value = [];\n        alert('cannot merge');\n      }\n      layerRef.value?.draw();\n      return newCell;\n    };\n\n    const breakCell = () => {\n      if (readonly.value) {\n        return;\n      }\n      if (selectedRects.value.length !== 1) {\n        throw new Error('break effect only 1 cell');\n      }\n      const bigRect = selectedRects.value[0];\n\n      const { attrs: { cell: { from, to } } } = bigRect;\n      const { unit, fill } = cellMeta.value;\n\n      // 将大矩形拆分成多个小矩形\n      for (let i = 0; i < to[0] - from[0]; i++) {\n        for (let j = 0; j < to[1] - from[1]; j++) {\n          const _x = from[0] + i;\n          const _y = from[1] + j;\n          const x = _x * unit;\n          const y = _y * unit;\n          const height = unit;\n          const width = unit;\n\n          const _rect = new Konva.Rect({\n            y, x, width, height, fill,\n            cell: {\n              from: [_x, _y],\n              to: [_x + 1, _y + 1],\n              merge: false\n            },\n            ...rectOptions\n          });\n          layerRef.value?.add(_rect);\n        }\n      }\n\n      selectedRects.value.forEach(s => s.remove());\n      selectedRects.value = [];\n      layerRef.value?.draw();\n    };\n\n    const getData = () => {\n      if (readonly.value) {\n        return;\n      }\n      const cells = getRectChildren(layerRef.value)\n        .filter(rect => rect instanceof Konva.Rect)\n        .map(rect => rect.attrs.cell) as Cell[];\n      if (!cells) {\n        return;\n      }\n\n      const newBookCase = {\n        ...data.value,\n        meta: cellMeta.value,\n        cells\n      };\n\n      bookcasePosition.value = {\n        x: stageRef.value?.x() || 20,\n        y: stageRef.value?.y() || 50,\n      };\n\n      return newBookCase;\n    };\n\n    const getActiveCells = () => {\n      return selectedRects.value.map(e => e.attrs.cell);\n    };\n\n    const resetView = () => {\n      if (!containerRef.value) {\n        return;\n      }\n      const root = containerRef.value.parentElement;\n      const clientWidth = root?.clientWidth || 300;\n      const clientHeight = root?.clientHeight || 300;\n\n      bookcasePosition.value = getInitPosition(cellMeta.value, clientWidth, clientHeight);\n\n      stageRef.value?.setPosition({\n        x: bookcasePosition.value.x,\n        y: bookcasePosition.value.y\n      }).scale({\n        x: 1, y: 1\n      });\n    };\n\n    ctx.expose({ mergeCells, breakCell, getData, getActiveCells, resetView });\n\n    return () => (<div style={{ width: '100%', height: '100%' }}>\n      <div ref={containerRef} />\n    </div>);\n  }\n});\n","/**\n * @file 书架名称输入组件\n * @author Yangholmes 2025-04-10\n */\n\nimport { defineComponent, PropType, ref, toRefs } from 'vue';\nimport cn from 'classnames';\n\nimport { t } from '@/i18n';\n\nimport { NInput } from 'naive-ui';\n\nimport styles from './bookcaseNameInput.module.less';\n\nconst titleMaxlength = 20;\n\nexport default defineComponent({\n  name: 'BookcaseNameInput',\n  props: {\n    value: {\n      type: String,\n      default: ''\n    },\n    isDual: {\n      type: (String) as PropType<'editonly' | 'readonly' | 'dual'>,\n      default: 'editonly'\n    },\n    placeholder: {\n      type: String,\n      default: t('pages.bookcase.bookcaseNmaeInput.defaultPlaceholder', [titleMaxlength])\n    },\n    onChange: {\n      type: Function as PropType<(val: string) => void>,\n    }\n  },\n  setup(props) {\n    const { value, isDual, placeholder } = toRefs(props);\n\n    const shouldEditName = ref(false);\n\n    const renderReadonlyValue = () => (<div>{value.value}</div>);\n\n    const renderReactValue = () => (<NInput\n      class={cn(styles.readonly)}\n      readonly\n      onClick={() => {\n        shouldEditName.value = true;\n      }}\n      value={value.value}\n    />);\n\n    const inputRef = ref<InstanceType<typeof NInput>>();\n    const renderInput = () => (<NInput\n      class={cn(styles.editor)}\n      ref={inputRef}\n      maxlength={titleMaxlength}\n      value={value.value}\n      placeholder={placeholder.value}\n      onKeyup={(e) => {\n        if (e.code === 'Enter') {\n          inputRef.value?.blur();\n          shouldEditName.value = false;\n        }\n      }}\n      onBlur={() => {\n        shouldEditName.value = false;\n        props.onChange?.(value.value?.trim());\n      }}\n      onInput={(val) => {\n        props.onChange?.(val);\n      }}\n    />);\n\n    const renderContent = () => {\n      if (isDual.value === 'editonly') {\n        return renderInput();\n      }\n      if (isDual.value === 'readonly') {\n        return renderReadonlyValue();\n      }\n      if (isDual.value === 'dual') {\n        return shouldEditName.value ? renderInput() : renderReactValue();\n      }\n      return renderReadonlyValue();\n    };\n\n    return () => renderContent();\n  }\n});\n"],"names":["getBoundingBox","cells","pointsCounter","cell","from","to","x1","y1","x2","y2","x","y","p","n","xs","ys","_","key","k","getRectChildren","layer","child","Rect","getInitPosition","meta","clientWidth","clientHeight","width","height","unit","getCenter","p1","p2","getDistance","defineComponent","name","props","data","type","Object","required","readonly","Boolean","default","beforeMerge","Function","beforeBreak","setup","ctx","toRefs","watch","value","init","immediate","containerRef","shallowRef","stageRef","layerRef","selectedRects","cellMeta","defaultMeta","bookcasePosition","ref","bookcase","fill","root","parentElement","stage","Konva","Stage","container","draggable","Layer","add","prevRect","lastCenter","lastDist","on","e","target","evt","preventDefault","touches","length","forEach","r","isDragging","stopDrag","fillSelected","push","draw","clientX","clientY","index","findIndex","rect","prevIndex","splice","newCenter","newDist","scaleX","scaleY","scale","dx","dy","newPosition","position","c","rectOptions","onMounted","mergeCells","Error","map","attrs","newCell","s","remove","_rect","alert","breakCell","bigRect","i","j","_x","_y","merge","getData","filter","newBookCase","getActiveCells","resetView","setPosition","expose","_createVNode","titleMaxlength","String","isDual","placeholder","t","onChange","shouldEditName","renderReadonlyValue","renderReactValue","NInput","cn","styles","onClick","inputRef","renderInput","editor","code","blur","onBlur","trim","val","renderContent"],"mappings":"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"}